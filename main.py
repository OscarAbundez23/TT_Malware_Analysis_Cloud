import sys, os, subprocess

"""def validar_ruta_archivo_json(ruta):
    # Verificar si la ruta existe
    if not os.path.exists(ruta):
        print("El archivo no existe.")
        return False

    # Verificar si la ruta es un archivo
    if not os.path.isfile(ruta):
        print("La ruta no corresponde a un archivo.")
        return False

    # Verificar si la extensión del archivo es JSON
    nombre_archivo, extension = os.path.splitext(ruta)
    if extension.lower() != ".json":
        print("El archivo no tiene extensión JSON.")
        return False

    # Validar si el contenido del archivo es JSON válido
    try:
        with open(ruta, 'r') as archivo:
            contenido = json.load(archivo)
        return True
    except json.JSONDecodeError:
        print("El archivo no contiene un JSON válido.")
        return False

def crearCarpetasExperimentos(lista_muestras, numero_experimento):
    ruta_carpeta_resultados = "/home/analista/experimentos/"+numero_experimento
    os.makedirs(ruta_carpeta_resultados)
    contador = 1
    for muestra in lista_muestras:
        ruta_subcarpeta_resultados = ruta_carpeta_resultados+"/"+str(contador)
        os.makedirs(ruta_subcarpeta_resultados)
        muestra.append(ruta_subcarpeta_resultados)
        contador += 1

    return ruta_carpeta_resultados"""

def obtenerResultadoComandos(comando, ruta_archivo_resultado):
    #comando.append(ruta_archivo)
    temp = subprocess.run(comando, capture_output=True, text=True)
    resultado = temp.stdout
    archivo_resultado = open(ruta_archivo_resultado, "w")
    archivo_resultado.write(resultado)
    archivo_resultado.close()

def ejecutar_comandos(ruta_archivo, ruta_carpeta_resultados, formato):
    #for comando in comandos:
    #    if comando == "metadata":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/file_"+formato+".txt"
    obtenerResultadoComandos(["file", ruta_archivo], ruta_archivo_resultado)

    ruta_archivo_resultado = ruta_carpeta_resultados+"/exiftool_"+formato+".txt"
    obtenerResultadoComandos(["exiftool", ruta_archivo], ruta_archivo_resultado)

    #    if comando == "hashes":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/md5_"+formato+".txt"
    obtenerResultadoComandos(["md5sum", ruta_archivo], ruta_archivo_resultado)

    ruta_archivo_resultado = ruta_carpeta_resultados+"/sha1_"+formato+".txt"
    obtenerResultadoComandos(["sha1sum", ruta_archivo], ruta_archivo_resultado)

    ruta_archivo_resultado = ruta_carpeta_resultados+"/sha256_"+formato+".txt"
    obtenerResultadoComandos(["sha256sum", ruta_archivo], ruta_archivo_resultado)

        #if comando == "strings":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/strings_"+formato+".txt"
    obtenerResultadoComandos(["strings", ruta_archivo], ruta_archivo_resultado)
        
        #if comando == "hexa":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/hexa_"+formato+".txt"
    obtenerResultadoComandos(["hexdump","-C",ruta_archivo], ruta_archivo_resultado)

        #if comando == "libraries":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/libraries_"+formato+".txt"
    obtenerResultadoComandos(["ldd",ruta_archivo], ruta_archivo_resultado)

        #if comando == "symbols":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/symbols_"+formato+".txt"
    obtenerResultadoComandos(["readelf","--symbols",ruta_archivo], ruta_archivo_resultado)

        #if comando == "asm":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/asm_"+formato+".txt"
    obtenerResultadoComandos(["objdump","-d",ruta_archivo], ruta_archivo_resultado)

        #if comando == "ssdeep":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/ssdeep_"+formato+".txt"
    obtenerResultadoComandos(["ssdeep",ruta_archivo], ruta_archivo_resultado)

        #if comando == "opcode":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/opcode_"+formato+".txt"
    ruta_opcode_sh = os.getcwd()+"/opcodes.sh"
    lista_comandos = [ruta_opcode_sh,ruta_archivo,ruta_carpeta_resultados]
    obtenerResultadoComandos(lista_comandos,ruta_archivo_resultado)
        
        #if comando == "header":
    ruta_archivo_resultado = ruta_carpeta_resultados+"/header_"+formato+".txt"
    lista_comandos = ["/home/analista/experimentos/scripts/opcodes.sh",ruta_archivo,ruta_carpeta_resultados]
    obtenerResultadoComandos(["readelf", "-a",ruta_archivo],ruta_archivo_resultado)


def recorrer_carpeta(ruta_carpeta):
    lista_archivos = []
    for directorio_actual,_, archivos in os.walk(ruta_carpeta):
        for archivo in archivos:
            ruta_absoluta = os.path.join(directorio_actual,archivo)
            lista_archivos.append(ruta_absoluta)
    
    return lista_archivos
    
def ejecutar_analisis_estatico(ruta_elemento, ruta_resultado):
    ejecutar_comandos(ruta_elemento, ruta_resultado, "tmp")
    """archivo_estructura_json = open(ruta_estructura_json,"r")
    estructura_json = json.load(archivo_estructura_json)
    archivo_estructura_json.close()

    lista_elementos = estructura_json["rutas_elementos"]
    lista_comandos = estructura_json["comandos"]
    formato = estructura_json["formato"]

    estructura_json["Ruta raiz resultados del experimento"] = crearCarpetasExperimentos(lista_elementos, estructura_json["numero experimento"])
    
    for elemento in lista_elementos:
        ruta_archivo = elemento[3]+"/"+elemento[2]
        ruta_carpeta_resultados = elemento[4]

        if zipfile.is_zipfile(ruta_archivo):
            print("Es un archivo zip")
            ruta_carpeta_descomp = elemento[3]+"/carpeta_archivos"
            shutil.unpack_archive(ruta_archivo,ruta_carpeta_descomp)
            lista_archivos = recorrer_carpeta(ruta_carpeta_descomp)
            contador = 1
            for archivo in lista_archivos:
                ruta_carpeta_resultados_tmp = ruta_carpeta_resultados + "/"+str(contador)
                #print("Estando en carpeta")
                #print(" ruta_carpeta_resultados:",ruta_carpeta_resultados_tmp)
                os.makedirs(ruta_carpeta_resultados_tmp, exist_ok=True)
                ejecutar_comandos(archivo, ruta_carpeta_resultados_tmp, lista_comandos, formato)
                contador += 1
        else:
            #print("Estando en solo archivos")
            #print("     ruta_carpeta_Resultados:",ruta_carpeta_resultados)
            ejecutar_comandos(ruta_archivo, ruta_carpeta_resultados, lista_comandos, formato)
    
    archivo_estructura_json = open(ruta_estructura_json,"w")
    json.dump(estructura_json, archivo_estructura_json, indent=4)
    archivo_estructura_json.close()
    return estructura_json"""
    
def getVariablesEntorno():
    carpeta_sample = os.getenv("PATH_SOURCE")
    ruta_resultados = os.getenv("PATH_RESULTADO")
    
    return carpeta_sample, ruta_resultados
#docker run --name contodo -e PATH_SOURCE="/home/experimento/tmp" -e PATH_RESULTADO="/home/experimento/resultados" -v D:\Oscar\ESCOM\Redes2.1\DNS:/home/experimento/tmp -v D:\oabun:/home/experimento/resultados
if __name__ == "__main__":
    # Obtener el argumento de la línea de comandos
    ruta_sample, ruta_resultados = getVariablesEntorno()
    if ruta_sample == None or ruta_resultados == None:
        print("Debe proporcionar rutas para los resultados y otra donde se encuentra los archivos a analizar")
        sys.exit(1)

    conteo=1
    for elemento in os.listdir(ruta_sample):
        if os.path.isfile(ruta_sample+"/"+elemento):
            ruta_resultado_elemento = ruta_resultados+"/Experimento"+str(conteo)
            os.mkdir(ruta_resultado_elemento)
            ejecutar_analisis_estatico(ruta_sample+"/"+elemento, ruta_resultado_elemento)
            conteo += 1
    print("Terminado")

