import sys, os, subprocess, json, yara, shutil, multiprocessing
import radare2_module_handler, entropy_calc
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient, BlobClient

global ruta_sample, ruta_resultados, ruta_plantilla
global ruta_log, diccionario_logs
ruta_log="/home/ubuntu/logs.json"
diccionario_logs={}

def checarExistenciaRuta(ruta):
    if os.path.exists(ruta):
        return True
    return False

def obtenerResultadoComandos(comando, ruta_archivo_resultado):
    comando.append(ruta_sample)
    tmp = subprocess.run(comando,capture_output=True, text=True)
    resultado = tmp.stdout
    archivo_resultado = open(ruta_archivo_resultado, "w")
    archivo_resultado.write(resultado)
    archivo_resultado.close()

def ejecutar_comandos_Linux(comando, ruta_carpeta_resultados):
    if comando == "metadata":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/file_"+".txt"
        obtenerResultadoComandos(["file" ], ruta_archivo_resultado)

        ruta_archivo_resultado = ruta_carpeta_resultados+"/exiftool_"+".txt"
        obtenerResultadoComandos(["exiftool" ], ruta_archivo_resultado)

    if comando == "hashes":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/md5_"+".txt"
        obtenerResultadoComandos(["md5sum" ], ruta_archivo_resultado)

        ruta_archivo_resultado = ruta_carpeta_resultados+"/sha1_"+".txt"
        obtenerResultadoComandos(["sha1sum" ], ruta_archivo_resultado)

        ruta_archivo_resultado = ruta_carpeta_resultados+"/sha256_"+".txt"
        obtenerResultadoComandos(["sha256sum" ], ruta_archivo_resultado)

    if comando == "strings":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/strings_"+".txt"
        obtenerResultadoComandos(["strings" ], ruta_archivo_resultado)
        
    if comando == "hexa":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/hexa_"+".txt"
        obtenerResultadoComandos(["hexdump","-C"], ruta_archivo_resultado)

    if comando == "libraries":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/libraries_"+".txt"
        obtenerResultadoComandos(["ldd"], ruta_archivo_resultado)

    if comando == "symbols":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/symbols_"+".txt"
        obtenerResultadoComandos(["readelf","--symbols"], ruta_archivo_resultado)

    if comando == "asm":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/asm_"+".txt"
        obtenerResultadoComandos(["objdump","-d"], ruta_archivo_resultado)

    if comando == "ssdeep":
        ruta_archivo_resultado = ruta_carpeta_resultados+"/ssdeep_"+".txt"
        obtenerResultadoComandos(["ssdeep"], ruta_archivo_resultado)

def escribir_resultados(resultado, ruta):
    if checarExistenciaRuta(ruta)==True:
        with open(ruta,"a") as writer:
            writer.write(resultado)
    else:
        with open(ruta,"w") as writer:
            writer.write(resultado)

def recorrer_carpeta(ruta_carpeta):
    lista_archivos = []
    for directorio_actual,_, archivos in os.walk(ruta_carpeta):
        for archivo in archivos:
            ruta_absoluta = os.path.join(directorio_actual,archivo)
            lista_archivos.append(ruta_absoluta)
    
    return lista_archivos

def llamar_ghidra_modulo(ruta_sample,plantilla_json,ruta_resultados):
    import ghidra_handler_module as ghidra_handler
    ghidra_handler.init_proceso_ghidra(ruta_sample,plantilla_json,ruta_resultados)

def detectar_tipo_binario(diccionario, matches):
    if "is_EXEC" in matches:
        diccionario["Tipo Binario"]="EXEC"
    elif "is_Shared_Object" in matches:
        diccionario["Tipo Binario"]="Shared_Object"
    else:
        diccionario["Tipo Binario"]="Otros"
    
def aplicar_reglas_Yara(ruta_sample):
    rules_path ={
                "ELF_format": "/home/ubuntu/Yara/ELF_format.yara",
                "Arquitecturas": "/home/ubuntu/Yara/arquitectura.yara",
                "upx": "/home/ubuntu/Yara/upx.yara",
                "Anti-debugging": "/home/ubuntu/Yara/anti-analysis.yara"
        }

    rules = yara.compile(filepaths=rules_path)
    diccionario = {}
    matches = rules.match(ruta_sample)
    if len(matches)>0:
        matches=[str(d) for d in matches]
        if "is_ELF" in matches:
            diccionario["File Type"]="ELF"
            if "Arquitectura_x86_64" in matches or "Arquitectura_x86_32" in matches:
                diccionario["Arquitectura"]="x86"
                detectar_tipo_binario(diccionario,matches)
            elif "Arquitectura_ARM" in matches:
                diccionario["Arquitectura"]="ARM"
                detectar_tipo_binario(diccionario,matches)
            else:
                diccionario["Arquitectura"]="Otra"
                detectar_tipo_binario(diccionario,matches)
            if "UPX" in matches:
                diccionario["Ofuscado"]="UPX"
            else:
                diccionario["Ofuscado"]=""
        else:
            diccionario["File Type"]="Otro"
            diccionario["Arquitectura"]=""
            diccionario["Tipo Binario"]=""
    return diccionario

def analisis_general(plantilla_json, ruta_carpeta_resultados):
    diccionario=aplicar_reglas_Yara(ruta_sample)
    if diccionario["Ofuscado"] == "UPX":
        if "Desempaquetar" in plantilla_json["Otros"]:
            comando = ["upx","-d",ruta_sample]
            tmp = subprocess.run(comando,capture_output=True, text=True)
            resultado = tmp.stdout

    with open(ruta_carpeta_resultados+"/info_general.json","w") as fd:
        json.dump(diccionario,fd,indent=4)

def ejecutar_analisis_estatico():
    archivo_estructura_json = open(ruta_plantilla,"r")
    plantilla_json = json.load(archivo_estructura_json)
    archivo_estructura_json.close()

    analisis_general(plantilla_json, ruta_resultados)

    if "Linux" in plantilla_json.keys():
        print("Linux")
        try:
            os.mkdir(ruta_resultados+"/Linux")
        except:
            pass
        for comando in plantilla_json["Linux"]:
            ejecutar_comandos_Linux(comando, ruta_resultados+"/Linux")
    
    if "radare2" in plantilla_json.keys():
        print("radare2")
        diccionario_r2 = {e:False for e in plantilla_json["radare2"]}
        try:
            os.mkdir(ruta_resultados+"/radare2")
        except:
            pass
        funcion = radare2_module_handler.ejecutar_comandos_radare2
        queue = multiprocessing.Queue()
        proceso_r2 = multiprocessing.Process(target=funcion,args=(plantilla_json["radare2"],ruta_resultados+"/radare2", ruta_sample, queue))
        proceso_r2.start()
        proceso_r2.join(420)

        if proceso_r2.is_alive:
            try:
                proceso_r2.terminate()
                proceso_r2.kill()
            except Exception as e:
                print("Error al intentar eliminar r2 process",e)

        for q in range(0,queue.qsize()):
            tmp_q = queue.get()
            if tmp_q in diccionario_r2:
                diccionario_r2[tmp_q] = True
        if None in diccionario_r2.values():
            diccionario_r2["Status"] = "Incompleto"
        else:
            diccionario_r2["Satus"] = "Ok"

    if "Ghidra" in plantilla_json.keys():
        print("Ghidra")
        try:
            os.mkdir(ruta_resultados+"/Ghidra")
        except:
            pass
        queue = multiprocessing.Queue()
        proceso_ghidra = multiprocessing.Process(target=llamar_ghidra_modulo,args=(ruta_sample,plantilla_json,ruta_resultados, queue))
        proceso_ghidra.start()
        proceso_ghidra.join(480)

        if proceso_ghidra.is_alive:
            try:
                proceso_ghidra.terminate()
                proceso_ghidra.kill()
            except Exception as e:
                print("Error al intentar eliminar r2 process",e)
    if "Otros" in plantilla_json.keys():
        try:
            os.mkdir(ruta_resultados+"/Otros")
        except:
            pass
        for comando in plantilla_json["Otros"]:
            entropy_calc.Obtener_resultados_Otros(comando, ruta_resultados+"/Otros",ruta_sample)

def descargarArchivos(listaResultados):
    id_suscripcion = listaResultados[0]
    cad_conexion = listaResultados[1]
    url_cuenta = listaResultados[2]
    nombre_contenedor_muestras = listaResultados[3]
    nombre_muestra = listaResultados[5]
    credential = DefaultAzureCredential()
    blob_service_client = BlobServiceClient(account_url=url_cuenta,credential=credential).from_connection_string(cad_conexion)
    container_client_sample = blob_service_client.get_container_client(container=nombre_contenedor_muestras)
    try:#Descarga de muestra de malware
        with open("/home/ubuntu/"+nombre_muestra, mode="wb") as fd:
            fd.write(container_client_sample.download_blob(nombre_muestra).readall())
    except Exception as ex:
        print("Exception", ex)
        sys.exit(-1)

    nombre_plantilla = listaResultados[6]
    nombre_contenedor_plantilla = listaResultados[7]
    container_client_plantillas = blob_service_client.get_container_client(container=nombre_contenedor_plantilla)
    try:#Descarga de plantilla de experimento
        with open("/home/ubuntu/"+nombre_plantilla, mode="wb") as fd:
            fd.write(container_client_plantillas.download_blob(nombre_plantilla).readall())
    except Exception as ex:
        print("Exception", ex)
        sys.exit(-1)

def comprimir_resultados():
    ruta_directorio = "/home/ubuntu/Resultados"
    ruta_archivo_comprimido="/home/ubuntu/Resultados_comp"

    shutil.make_archive(ruta_archivo_comprimido,"zip", ruta_directorio) 
    return ruta_archivo_comprimido+".zip"

def comprimir_resultados():
    ruta_directorio = "/home/ubuntu/Resultados"
    ruta_archivo_comprimido="/home/ubuntu/Resultados_comp"

    shutil.make_archive(ruta_archivo_comprimido,"zip", ruta_directorio) 
    return ruta_archivo_comprimido+".zip"

def subirResultados(listaResultados, ruta_sample):
    ruta_compreso = comprimir_resultados()
    id_suscripcion = listaResultados[0]
    cad_conexion = listaResultados[1]
    url_cuenta = listaResultados[2]
    nombre_contenedor_resultados = listaResultados[4]
    nombre_resultado = listaResultados[8]
    credential = DefaultAzureCredential()
    blob_service_client = BlobServiceClient(account_url=url_cuenta,credential=credential).from_connection_string(cad_conexion)

    blob_client = blob_service_client.get_blob_client(container=nombre_contenedor_resultados, blob=nombre_resultado)
    with open(file=ruta_compreso, mode="rb") as data:
        blob_client.upload_blob(data)

def getVariablesEntorno():

    id_suscripcion = os.getenv("SUBSCRIPTION_ID")
    cad_conexion = os.getenv("CONNECT_STRING")
    url_cuenta= os.getenv("ACCOUNT_URL")
    nombre_contenedor_muestras = os.getenv("SAMPLES_CONTAINER_NAME")
    nombre_contenedor_plantillas = os.getenv("TEMPLATE_CONTAINER_NAME")
    nombre_contenedor_resultados = os.getenv("RESULT_CONTAINER_NAME")
    nombre_muestra = os.getenv("SAMPLE_NAME")
    nombre_plantilla = os.getenv("TEMPLATE_NAME")
    nombre_resultado = os.getenv("RESULT_NAME")

    uri_resultados = os.getenv("PATH_RESULTADO")
    
    return [id_suscripcion, cad_conexion, url_cuenta, nombre_contenedor_muestras, nombre_contenedor_resultados, nombre_muestra, nombre_plantilla, nombre_contenedor_plantillas, nombre_resultado]

def inicializarLogs():
    pass


if __name__ == "__main__":
    inicializarLogs()
    credential = DefaultAzureCredential()
    lista = getVariablesEntorno()
    if None in lista:
        diccionario_logs["status"]="Fallido"
        diccionario_logs["Error"]="No se establecieron correctamente las variables de entorno"
    #if uri_sample is None or uri_resultados is None or uri_plantilla is None:
        print("Asegurese de haber configurado correctamente todas las variables del entorno")
        sys.exit(-1)
    nombre_Sample=lista[5]
    nombre_plantilla=lista[6]
    descargarArchivos(lista)
    if nombre_Sample is None or nombre_plantilla is None:
        diccionario_logs["status"]="Fallido"
        diccionario_logs["Error"]="No se pudo descargar correctamente la muestra/sample"
        print("Las rutas de la plantilla y/o el sample son invalidas")
        #registrarLog("Error en la")
        sys.exit(-1)
    ruta_sample = "/home/ubuntu/"+nombre_Sample
    ruta_plantilla = "/home/ubuntu/"+nombre_plantilla
    ruta_resultados = "/home/ubuntu/Resultados"
    os.mkdir(ruta_resultados)
    if not(checarExistenciaRuta(ruta_plantilla)) or not(checarExistenciaRuta(ruta_sample)) or not(checarExistenciaRuta(ruta_resultados)):
        if not(checarExistenciaRuta(ruta_plantilla)):
            print("ruta plantilla no existe")
        if not(checarExistenciaRuta(ruta_sample)):
            print("ruta sample no existe")
        if not(checarExistenciaRuta(ruta_resultados)):
            print("ruta resultados no existe")
        print("Error de ruta no existente")
        sys.exit(-1)
    if os.path.splitext(ruta_plantilla)[1] != ".json":
        diccionario_logs["status"]="Fallido"
        diccionario_logs["Error"]="La plantilla no es un archivo JSON"
        print("Error, la plantilla de experimento debe ser json") 
        sys.exit(-1)
    ejecutar_analisis_estatico()        
    subirResultados(lista, ruta_sample)
