import r2pipe, math, json, os

def calcular_entropia(counted_bytes, total_bytes_read):
    entropia=0
    for i in range(0,256):
        tmp = counted_bytes[i]/total_bytes_read
        if tmp>0:
            entropia += tmp*abs(math.log(tmp,2))
    
    return round(entropia,4)

def getBytesContados(offset_seccion, tamanio_seccion, path_sample):
    with open(path_sample,"rb") as fd:
        fd.seek(offset_seccion)
        counted_bytes=[0]*256
        if tamanio_seccion == None:
            buffer = fd.read()
            total_bytes_read = len(buffer)
        else:
            buffer = fd.read(tamanio_seccion)
            total_bytes_read = tamanio_seccion
        
        for caracter in buffer:
            counted_bytes[caracter] = counted_bytes[caracter]+1

        return counted_bytes

def proceso_entropia_por_seccion(path_sample):
    r2 = r2pipe.open(path_sample)
    r2.cmd('aaaa 0>/dev/null')

    secciones_importantes = [".init",".plt",".text", ".rodata",".data",".bss"]

    secciones_programa =r2.cmdj("iSj")
    r2.quit()
    diccionario_entropia={}
    for seccion in secciones_programa:
        if seccion["name"] in secciones_importantes:
            offset_seccion = seccion["paddr"]
            tamanio_seccion = seccion["size"]
            if tamanio_seccion > 0:

                counted_bytes = getBytesContados(offset_seccion,tamanio_seccion, path_sample)
                entropia = calcular_entropia(counted_bytes, tamanio_seccion)
                diccionario_entropia[seccion["name"]] = entropia
    return diccionario_entropia

def obtenerEntropia(ruta_carpeta_resultados,ruta_sample):
    diccionario_entropia = proceso_entropia_por_seccion(ruta_sample)

    counted_bytes_general = getBytesContados(0,None,ruta_sample)
    diccionario_entropia["Entropia General"] = calcular_entropia(counted_bytes_general, os.path.getsize(ruta_sample))
    return diccionario_entropia

def Obtener_resultados_Otros(comando, ruta_carpeta_resultados,ruta_sample):
    if comando == "entropia":
        diccionario_entropia = obtenerEntropia(ruta_carpeta_resultados,ruta_sample)
        with open(ruta_carpeta_resultados+"/entropia.json","w") as fd:
            json.dump(diccionario_entropia,fd,indent=4)